name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${{ secrets.ECR_REPOSITORY }}" --region "${{ secrets.AWS_REGION }}" || \
          aws ecr create-repository --repository-name "${{ secrets.ECR_REPOSITORY }}" --region "${{ secrets.AWS_REGION }}"

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region "${{ secrets.AWS_REGION }}" | \
          docker login --username AWS --password-stdin "${{ secrets.ECR_REGISTRY }}"

      - name: Build, tag, and push Docker image to ECR
        run: |
          set -e
          IMAGE_TAG="${{ github.run_number }}"
          IMAGE_URI="${{ secrets.ECR_REGISTRY }}"

          docker build -t "$IMAGE_URI:$IMAGE_TAG" -t "$IMAGE_URI:latest" .

          docker push "$IMAGE_URI:$IMAGE_TAG"
          docker push "$IMAGE_URI:latest"

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ secrets.ECR_REGISTRY }}:${{ github.run_number }}"
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: SSH to server and deploy container
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "${{ secrets.ECR_REGISTRY }}"
            docker rm -f resume || true
            docker pull "${{ secrets.ECR_REGISTRY }}:${{ github.run_number }}"
            docker run -d --name resume -p 8080:5001 "${{ secrets.ECR_REGISTRY }}:${{ github.run_number }}"
